#!/usr/bin/env ruby

require_relative '../lib/pws'

action_or_namespace = $*.shift

if action_or_namespace =~ /^-.*$/
  @action = $*.shift
  @namespace = $& unless $& == ?-
else
  @action = action_or_namespace
  @namespace = nil
end

@action = @action ? @action.to_sym : :show
@args   = [*$*]

begin
  case @action
  when :'?', :help, :commands, :actions
    puts \
<<HELP
  
  #{Paint["Usage", :underline]}
  
  #{Paint['pws', :bold]} [-namespace] action [arguments]
  
  #{Paint["Info", :underline]}
  
  pws allows you to manage passwords in encryted password files (safes). It
  operates on the file specified in the environment variable PWS or on "~/.pws".
  You can apply a namespace as first parameter that will be appended to the
  filename, e.g. `pws -work show` with normal env would use "~/.pws-work" as safe.
  
  #{Paint["Available actions", :underline]}
  
  #{Paint['ls', :bold]} / list / show / status 
  Lists all available password entries.
  
  #{Paint['add', :bold]} / set / store / create ( name, password = nil )
  Stores a new password entry. The second argument can be a password, but
  it's recommended not omit it and enter it interactively.
  
  #{Paint['get', :bold]} / entry / copy ( name, seconds = 10 )
  Copies the password for <name> to the clipboard. If second argument is 0,
  the password will stay in the clipboard.
  
  #{Paint['gen', :bold]} / generate ( name, seconds = 10, length = 64, chars )
  Generates a new password for <name> and copies it to the clipboard. The
  second argument is the time that get passed to get. The third argument
  sets a password length. The fourth argument allows you to pass a char pool
  that is used for generating the passwords.
  
  #{Paint['rm', :bold]} / remove / del / delete ( name )
  Removes a password entry.
  
  #{Paint['master', :bold]} ( password = nil )
  Changes the master password.
  
  #{Paint['v', :bold]} / version
  Displays version and website.
  
  #{Paint['?', :bold]} / help / commands
  Displays this help.
  
HELP
  when :v, :version
    puts "pws #{PWS::VERSION} by " + Paint["J-_-L", :bold] + " <https://github.com/janlelis/pws>"
  else # redirect to safe
    if PWS.public_instance_methods(false).include?(@action)
      PWS.new(nil, @namespace).send @action, *@args
    else
      pa "Unknown action: #@action\nPlease see `pws help` for a list of available commands!", :red
    end
  end
rescue PWS::NoAccess
  # pa $!.message.capitalize, :red, :bold
  pa "NO ACCESS", :red, :bold
rescue ArgumentError
  pa $!.message.capitalize, :red
rescue Interrupt
  system 'stty echo' if $stdin.tty? # ensure terminal's working
  pa "..canceled", :red
end
